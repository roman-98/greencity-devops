name: Frontend CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'README.md'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v3
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_FRONTEND }}
      - name: Configure SSH for GitHub
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_FRONTEND }}" > ~/.ssh/id_frontend
          chmod 600 ~/.ssh/id_frontend
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo -e "Host github.com-frontend\n HostName github.com\n User git\n IdentityFile ~/.ssh/id_frontend\n" >> ~/.ssh/config
      - name: Cache SSH configuration
        uses: actions/cache@v3
        with:
          path: ~/.ssh
          key: ${{ runner.os }}-ssh-${{ hashFiles('~/.ssh/**') }}
          restore-keys: |
            ${{ runner.os }}-ssh-

  clone_repository:
    name: Clone Frontend Repository
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Restore SSH configuration
        uses: actions/cache@v3
        with:
          path: ~/.ssh
          key: ${{ runner.os }}-ssh-${{ hashFiles('~/.ssh/**') }}
      - name: Checkout frontend repo
        run: |
          git clone git@github.com-frontend:DevOps-ProjectLevel/greencity-frontend-roman-98.git greencity-frontend-roman-98
      - name: Cache frontend repository
        uses: actions/cache@v3
        with:
          path: greencity-frontend-roman-98
          key: ${{ runner.os }}-repo-frontend-${{ github.sha }}

  build_and_push:
    name: Build and Push Frontend
    needs: clone_repository
    runs-on: ubuntu-latest
    steps:
      - name: Restore frontend repository
        uses: actions/cache@v3
        with:
          path: greencity-frontend-roman-98
          key: ${{ runner.os }}-repo-frontend-${{ github.sha }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Set version using GitHub Run ID
        run: echo "VERSION=${{ github.run_id }}" >> $GITHUB_ENV
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./greencity-frontend-roman-98
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/greencity-frontend:${{ env.VERSION }}
            ghcr.io/${{ github.repository_owner }}/greencity-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-chart-and-release:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Update Helm chart version
        run: |
          CHART_YAML=helm/frontend-chart/Chart.yaml
          CURRENT_VERSION=$(grep 'version:' $CHART_YAML | awk '{print $2}')
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/" $CHART_YAML
          echo "CHART_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update app version to GitHub Run ID
        run: |
          CHART_YAML=helm/frontend-chart/Chart.yaml
          NEW_APP_VERSION=${{ github.run_id }}
          sed -i "s/appVersion: .*/appVersion: \"$NEW_APP_VERSION\"/" $CHART_YAML
          echo "APP_VERSION=$NEW_APP_VERSION" >> $GITHUB_ENV

      - name: Update values.yaml with GitHub Run ID as tag
        run: |
          VERSION="${{ github.run_id }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          sed -i 's/^ *tag: *".*"/tag: "'"$VERSION"'"/' helm/frontend-chart/values.yaml

      - name: Commit and push changes
        run: |
          git add helm/frontend-chart/Chart.yaml helm/frontend-chart/values.yaml
          git commit -m "Update Helm chart to version ${{ env.CHART_VERSION }} with app version ${{ env.APP_VERSION }}"
          git pull && git push

  notify:
    name: Notify on completion
    needs: update-chart-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          fields: workflow,job,commit,repo,ref,author,took
          status: ${{ job.status }}
          text: |
            *Workflow*: ${{ github.workflow }}
            *Status*: ${{ job.status }}
            *Repository*: ${{ github.repository }}
            *Branch*: ${{ github.ref_name }}
            *Commit*: ${{ github.sha }} - ${{ github.event.head_commit.message }}
            *Author*: ${{ github.actor }}
            *Event*: ${{ github.event_name }}
            *Run ID*: ${{ github.run_id }}
            *Job ID*: ${{ github.job }}
            *Workflow URL*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            *Time of Completion*: ${{ steps.time.outputs.timestamp }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
      - name: Get timestamp
        id: time
        run: echo "timestamp=$(date -u)" >> $GITHUB_ENV